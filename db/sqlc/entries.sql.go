// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: entries.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entry (
  id,
  domain,
  login,
  password,
  meta
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, domain, login, password, created, updated, meta
`

type CreateEntryParams struct {
	ID       uuid.UUID      `json:"id"`
	Domain   string         `json:"domain"`
	Login    sql.NullString `json:"login"`
	Password string         `json:"password"`
	Meta     sql.NullString `json:"meta"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry,
		arg.ID,
		arg.Domain,
		arg.Login,
		arg.Password,
		arg.Meta,
	)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Login,
		&i.Password,
		&i.Created,
		&i.Updated,
		&i.Meta,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :one
DELETE FROM entry
WHERE id = $1
RETURNING id, domain, login, password, created, updated, meta
`

func (q *Queries) DeleteEntry(ctx context.Context, id uuid.UUID) (Entry, error) {
	row := q.db.QueryRowContext(ctx, deleteEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Login,
		&i.Password,
		&i.Created,
		&i.Updated,
		&i.Meta,
	)
	return i, err
}

const getEntries = `-- name: GetEntries :many
SELECT id, domain, login, password, created, updated, meta FROM entry
ORDER BY domain
LIMIT $1
OFFSET $2
`

type GetEntriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetEntries(ctx context.Context, arg GetEntriesParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, getEntries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.Login,
			&i.Password,
			&i.Created,
			&i.Updated,
			&i.Meta,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntriesByDomain = `-- name: GetEntriesByDomain :many
SELECT id, domain, login, password, created, updated, meta FROM entry
WHERE domain LIKE CONCAT('%', $1::text, '%')
`

func (q *Queries) GetEntriesByDomain(ctx context.Context, domainsubstr string) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, getEntriesByDomain, domainsubstr)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.Login,
			&i.Password,
			&i.Created,
			&i.Updated,
			&i.Meta,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntryByID = `-- name: GetEntryByID :one
SELECT id, domain, login, password, created, updated, meta FROM entry
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEntryByID(ctx context.Context, id uuid.UUID) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntryByID, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Login,
		&i.Password,
		&i.Created,
		&i.Updated,
		&i.Meta,
	)
	return i, err
}

const updateEntry = `-- name: UpdateEntry :one
UPDATE entry
SET
  login = $2,
  password = $3,
  meta = $4,
  updated = now()
WHERE id = $1
RETURNING id, domain, login, password, created, updated, meta
`

type UpdateEntryParams struct {
	ID       uuid.UUID      `json:"id"`
	Login    sql.NullString `json:"login"`
	Password string         `json:"password"`
	Meta     sql.NullString `json:"meta"`
}

func (q *Queries) UpdateEntry(ctx context.Context, arg UpdateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, updateEntry,
		arg.ID,
		arg.Login,
		arg.Password,
		arg.Meta,
	)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Login,
		&i.Password,
		&i.Created,
		&i.Updated,
		&i.Meta,
	)
	return i, err
}
